/* tslint:disable */

/* eslint-disable */

/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type {
    ErrorResponse,
    LocationsCreateReq,
    LocationsCreateRes,
    LocationsGetByIdRes,
    LocationsGetOngoingStatusRes,
    LocationsGetTasksRes,
    LocationsRenameReq,
} from "../models";
import * as runtime from "../runtime";

export interface ApiEndpointsLocationsCreateRequest {
    locationsCreateReq: LocationsCreateReq;
}

export interface ApiEndpointsLocationsDeleteRequest {
    id: number;
}

export interface ApiEndpointsLocationsGetByIdRequest {
    id: number;
}

export interface ApiEndpointsLocationsGetSnapshotRequest {
    id: number;
}

export interface ApiEndpointsLocationsGetTasksRequest {
    id: number;
}

export interface ApiEndpointsLocationsRenameRequest {
    id: number;
    locationsRenameReq: LocationsRenameReq;
}

export interface ApiEndpointsLocationsOngoingStatus {
    id: number;
}

/**
 *
 */
export class LocationsApi extends runtime.BaseAPI {
    /**
     */
    async apiEndpointsLocationsCreateRaw(
        requestParameters: ApiEndpointsLocationsCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<LocationsCreateRes>> {
        if (
            requestParameters.locationsCreateReq === null ||
            requestParameters.locationsCreateReq === undefined
        ) {
            throw new runtime.RequiredError(
                "locationsCreateReq",
                "Required parameter requestParameters.locationsCreateReq was null or undefined when calling apiEndpointsLocationsCreate."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/v1/locations`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.locationsCreateReq,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsCreate(
        requestParameters: ApiEndpointsLocationsCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<LocationsCreateRes> {
        const response = await this.apiEndpointsLocationsCreateRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async apiEndpointsLocationsDeleteRaw(
        requestParameters: ApiEndpointsLocationsDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsDelete."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsDelete(
        requestParameters: ApiEndpointsLocationsDeleteRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.apiEndpointsLocationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiEndpointsLocationsGetByIdRaw(
        requestParameters: ApiEndpointsLocationsGetByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<LocationsGetByIdRes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsGetById."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsGetById(
        requestParameters: ApiEndpointsLocationsGetByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<LocationsGetByIdRes> {
        const response = await this.apiEndpointsLocationsGetByIdRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async apiEndpointsLocationsGetSnapshotRaw(
        requestParameters: ApiEndpointsLocationsGetSnapshotRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsGetSnapshot."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}/snapshot`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsGetSnapshot(
        requestParameters: ApiEndpointsLocationsGetSnapshotRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Blob> {
        const response = await this.apiEndpointsLocationsGetSnapshotRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async apiEndpointsLocationsGetTasksRaw(
        requestParameters: ApiEndpointsLocationsGetTasksRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<LocationsGetTasksRes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsGetTasks."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}/tasks`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsGetTasks(
        requestParameters: ApiEndpointsLocationsGetTasksRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<LocationsGetTasksRes> {
        const response = await this.apiEndpointsLocationsGetTasksRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     */
    async apiEndpointsLocationsRenameRaw(
        requestParameters: ApiEndpointsLocationsRenameRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsRename."
            );
        }

        if (
            requestParameters.locationsRenameReq === null ||
            requestParameters.locationsRenameReq === undefined
        ) {
            throw new runtime.RequiredError(
                "locationsRenameReq",
                "Required parameter requestParameters.locationsRenameReq was null or undefined when calling apiEndpointsLocationsRename."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.locationsRenameReq,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsRename(
        requestParameters: ApiEndpointsLocationsRenameRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.apiEndpointsLocationsRenameRaw(requestParameters, initOverrides);
    }

    async apiEndpointsLocationsGetOngoingStatusRaw(
        requestParameters: ApiEndpointsLocationsOngoingStatus,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<LocationsGetOngoingStatusRes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                "id",
                "Required parameter requestParameters.id was null or undefined when calling apiEndpointsLocationsGetSnapshot."
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/v1/locations/{id}/getongoingstatus`.replace(
                    `{$r{"id"}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsLocationsGetOngoingStatus(
        requestParameters: ApiEndpointsLocationsOngoingStatus,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<LocationsGetOngoingStatusRes> {
        const response = await this.apiEndpointsLocationsGetOngoingStatus(
            requestParameters,
            initOverrides
        );
        return response;
    }
}
