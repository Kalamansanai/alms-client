/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiEndpointsTasksCreateReq,
  ApiEndpointsTasksCreateRes,
  ApiEndpointsTasksDeleteReq,
  ApiEndpointsTasksGetByIdRes,
  ApiEndpointsTasksGetInstanceRes,
  ApiEndpointsTasksGetObjectsAndStepsRes,
  ApiEndpointsTasksUpdateReq,
} from '../models';

export interface ApiEndpointsTasksCreateRequest {
    apiEndpointsTasksCreateReq: ApiEndpointsTasksCreateReq;
}

export interface ApiEndpointsTasksDeleteRequest {
    id: number;
    apiEndpointsTasksDeleteReq: ApiEndpointsTasksDeleteReq;
}

export interface ApiEndpointsTasksGetByIdRequest {
    id: number;
}

export interface ApiEndpointsTasksGetInstanceRequest {
    id: string;
    taskId: number;
}

export interface ApiEndpointsTasksGetObjectsAndStepsRequest {
    taskId: number;
}

export interface ApiEndpointsTasksUpdateRequest {
    id: number;
    apiEndpointsTasksUpdateReq: ApiEndpointsTasksUpdateReq;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     */
    async apiEndpointsTasksCreateRaw(requestParameters: ApiEndpointsTasksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEndpointsTasksCreateRes>> {
        if (requestParameters.apiEndpointsTasksCreateReq === null || requestParameters.apiEndpointsTasksCreateReq === undefined) {
            throw new runtime.RequiredError('apiEndpointsTasksCreateReq','Required parameter requestParameters.apiEndpointsTasksCreateReq was null or undefined when calling apiEndpointsTasksCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiEndpointsTasksCreateReq,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsTasksCreate(requestParameters: ApiEndpointsTasksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEndpointsTasksCreateRes> {
        const response = await this.apiEndpointsTasksCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEndpointsTasksDeleteRaw(requestParameters: ApiEndpointsTasksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEndpointsTasksDelete.');
        }

        if (requestParameters.apiEndpointsTasksDeleteReq === null || requestParameters.apiEndpointsTasksDeleteReq === undefined) {
            throw new runtime.RequiredError('apiEndpointsTasksDeleteReq','Required parameter requestParameters.apiEndpointsTasksDeleteReq was null or undefined when calling apiEndpointsTasksDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiEndpointsTasksDeleteReq,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiEndpointsTasksDelete(requestParameters: ApiEndpointsTasksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiEndpointsTasksDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEndpointsTasksGetByIdRaw(requestParameters: ApiEndpointsTasksGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEndpointsTasksGetByIdRes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEndpointsTasksGetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsTasksGetById(requestParameters: ApiEndpointsTasksGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEndpointsTasksGetByIdRes> {
        const response = await this.apiEndpointsTasksGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEndpointsTasksGetInstanceRaw(requestParameters: ApiEndpointsTasksGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEndpointsTasksGetInstanceRes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEndpointsTasksGetInstance.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling apiEndpointsTasksGetInstance.');
        }

        const queryParameters: any = {};

        if (requestParameters.taskId !== undefined) {
            queryParameters['TaskId'] = requestParameters.taskId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsTasksGetInstance(requestParameters: ApiEndpointsTasksGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEndpointsTasksGetInstanceRes> {
        const response = await this.apiEndpointsTasksGetInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEndpointsTasksGetObjectsAndStepsRaw(requestParameters: ApiEndpointsTasksGetObjectsAndStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiEndpointsTasksGetObjectsAndStepsRes>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling apiEndpointsTasksGetObjectsAndSteps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tasks/{TaskId}/objects_and_steps`.replace(`{${"TaskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiEndpointsTasksGetObjectsAndSteps(requestParameters: ApiEndpointsTasksGetObjectsAndStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiEndpointsTasksGetObjectsAndStepsRes> {
        const response = await this.apiEndpointsTasksGetObjectsAndStepsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiEndpointsTasksUpdateRaw(requestParameters: ApiEndpointsTasksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiEndpointsTasksUpdate.');
        }

        if (requestParameters.apiEndpointsTasksUpdateReq === null || requestParameters.apiEndpointsTasksUpdateReq === undefined) {
            throw new runtime.RequiredError('apiEndpointsTasksUpdateReq','Required parameter requestParameters.apiEndpointsTasksUpdateReq was null or undefined when calling apiEndpointsTasksUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.apiEndpointsTasksUpdateReq,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiEndpointsTasksUpdate(requestParameters: ApiEndpointsTasksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiEndpointsTasksUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
